<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Bin\LPC17xx\main.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Bin\LPC17xx\main.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Fri Jan 19 23:39:47 2018
<BR><P>
<H3>Maximum Stack Usage =        600 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; DFT(int, int, double*, double*, double*, double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[64]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">NMI_Handler</a><BR>
 <LI><a href="#[d]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">HardFault_Handler</a><BR>
 <LI><a href="#[e]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">MemManage_Handler</a><BR>
 <LI><a href="#[f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">BusFault_Handler</a><BR>
 <LI><a href="#[10]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">UsageFault_Handler</a><BR>
 <LI><a href="#[11]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">SVC_Handler</a><BR>
 <LI><a href="#[12]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">DebugMon_Handler</a><BR>
 <LI><a href="#[2c]">BOD_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">BOD_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2b]">ADC_IRQHandler</a> from lib.o(i.ADC_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[37]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[31]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[33]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[35]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">PWM1_IRQHandler</a> from lib.o(i.PWM1_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from lib.o(i.PendSV_Handler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[34]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[32]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[62]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">SysTick_Handler</a> from lib.o(i.SysTick_Handler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">TIMER0_IRQHandler</a> from lib.o(i.TIMER0_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">TIMER1_IRQHandler</a> from lib.o(i.TIMER1_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">TIMER2_IRQHandler</a> from lib.o(i.TIMER2_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">TIMER3_IRQHandler</a> from lib.o(i.TIMER3_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">UART0_IRQHandler</a> from lib.o(i.UART0_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">UART1_IRQHandler</a> from lib.o(i.UART1_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">UART3_IRQHandler</a> from lib.o(i.UART3_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[36]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">USB_IRQHandler</a> from lib.o(i.USB_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[40]">cDevDigital::isReleased()</a> from lib.o(i._ZN11cDevDigital10isReleasedEv) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[41]">cDevDigital::isActivated()</a> from lib.o(i._ZN11cDevDigital11isActivatedEv) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[3d]">cDevDigital::get()</a> from lib.o(i._ZN11cDevDigital3getEv) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[3f]">cDevDigital::isSet()</a> from lib.o(i._ZN11cDevDigital5isSetEv) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[3e]">cDevDigital::update()</a> from lib.o(i._ZN11cDevDigital6updateEv) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[42]">TimerHandler::update()</a> from main.o(i._ZN12TimerHandler6updateEv) referenced from main.o(.constdata__ZTV12TimerHandler)
 <LI><a href="#[59]">cHwSPImaster::Device::write(unsigned char*, unsigned short)</a> from lib.o(i._ZN12cHwSPImaster6Device5writeEPht) referenced from lib.o(.constdata__ZTVN12cHwSPImaster6DeviceE)
 <LI><a href="#[43]">cHwSPImaster_1::transceiveByte(unsigned char)</a> from lib.o(i._ZN14cHwSPImaster_114transceiveByteEh) referenced from lib.o(.constdata__ZTV14cHwSPImaster_1)
 <LI><a href="#[45]">cHwDisplayGraphic::putRectangle(unsigned short, unsigned short, unsigned short, unsigned short)</a> from lib.o(i._ZN17cHwDisplayGraphic12putRectangleEtttt) referenced from lib.o(.constdata__ZTV17cHwDisplayGraphic)
 <LI><a href="#[45]">cHwDisplayGraphic::putRectangle(unsigned short, unsigned short, unsigned short, unsigned short)</a> from lib.o(i._ZN17cHwDisplayGraphic12putRectangleEtttt) referenced from lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
 <LI><a href="#[44]">cHwDisplayGraphic::setPaintColor(unsigned short)</a> from lib.o(i._ZN17cHwDisplayGraphic13setPaintColorEt) referenced from lib.o(.constdata__ZTV17cHwDisplayGraphic)
 <LI><a href="#[44]">cHwDisplayGraphic::setPaintColor(unsigned short)</a> from lib.o(i._ZN17cHwDisplayGraphic13setPaintColorEt) referenced from lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
 <LI><a href="#[46]">cDevControlEncoder::update()</a> from lib.o(i._ZN18cDevControlEncoder6updateEv) referenced from lib.o(.constdata__ZTV18cDevControlEncoder)
 <LI><a href="#[46]">cDevControlEncoder::update()</a> from lib.o(i._ZN18cDevControlEncoder6updateEv) referenced from lib.o(.constdata__ZTV26cDevControlEncoderJoystick)
 <LI><a href="#[47]">cDevControlEncoder::getCtrl()</a> from lib.o(i._ZN18cDevControlEncoder7getCtrlEv) referenced from lib.o(.constdata__ZTV18cDevControlEncoder)
 <LI><a href="#[47]">cDevControlEncoder::getCtrl()</a> from lib.o(i._ZN18cDevControlEncoder7getCtrlEv) referenced from lib.o(.constdata__ZTV26cDevControlEncoderJoystick)
 <LI><a href="#[49]">cDevDisplayGraphic::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</a> from lib.o(i._ZN18cDevDisplayGraphic13drawRectangleEttttt) referenced from lib.o(.constdata__ZTV18cDevDisplayGraphic)
 <LI><a href="#[48]">cDevDisplayGraphic::clear()</a> from lib.o(i._ZN18cDevDisplayGraphic5clearEv) referenced from lib.o(.constdata__ZTV18cDevDisplayGraphic)
 <LI><a href="#[4a]">cHwDisp_SPFD5408Bspi::clear()</a> from lib.o(i._ZN20cHwDisp_SPFD5408Bspi5clearEv) referenced from lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
 <LI><a href="#[4b]">cHwDisp_SPFD5408Bspi::setArea(unsigned short, unsigned short, unsigned short, unsigned short)</a> from lib.o(i._ZN20cHwDisp_SPFD5408Bspi7setAreaEtttt) referenced from lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
 <LI><a href="#[4c]">cHwDisp_SPFD5408Bspi::setPixel(unsigned short)</a> from lib.o(i._ZN20cHwDisp_SPFD5408Bspi8setPixelEt) referenced from lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
 <LI><a href="#[4d]">cDevControlEncoderJoystick::getIncrement()</a> from lib.o(i._ZN26cDevControlEncoderJoystick12getIncrementEv) referenced from lib.o(.constdata__ZTV26cDevControlEncoderJoystick)
 <LI><a href="#[5a]">cList::Item::update()</a> from lib.o(i._ZN5cList4Item6updateEv) referenced from lib.o(.constdata__ZTVN5cList4ItemE)
 <LI><a href="#[50]">cHwADC::get(unsigned char)</a> from lib.o(i._ZN6cHwADC3getEh) referenced from lib.o(.constdata__ZTV6cHwADC)
 <LI><a href="#[50]">cHwADC::get(unsigned char)</a> from lib.o(i._ZN6cHwADC3getEh) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[51]">cHwADC::isr()</a> from lib.o(i._ZN6cHwADC3isrEv) referenced from lib.o(.constdata__ZTV6cHwADC)
 <LI><a href="#[51]">cHwADC::isr()</a> from lib.o(i._ZN6cHwADC3isrEv) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[4f]">cHwADC::enable(unsigned char)</a> from lib.o(i._ZN6cHwADC6enableEh) referenced from lib.o(.constdata__ZTV6cHwADC)
 <LI><a href="#[4f]">cHwADC::enable(unsigned char)</a> from lib.o(i._ZN6cHwADC6enableEh) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[4e]">cHwADC::update()</a> from lib.o(i._ZN6cHwADC6updateEv) referenced from lib.o(.constdata__ZTV6cHwADC)
 <LI><a href="#[4e]">cHwADC::update()</a> from lib.o(i._ZN6cHwADC6updateEv) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[5e]">cHwPort::Pin::clr()</a> from lib.o(i._ZN7cHwPort3Pin3clrEv) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[5f]">cHwPort::Pin::get()</a> from lib.o(i._ZN7cHwPort3Pin3getEv) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[5d]">cHwPort::Pin::set(bool)</a> from lib.o(i._ZN7cHwPort3Pin3setEb) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[5c]">cHwPort::Pin::set()</a> from lib.o(i._ZN7cHwPort3Pin3setEv) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[5b]">cHwPort::Pin::setMode(cHwPort::Mode)</a> from lib.o(i._ZN7cHwPort3Pin7setModeENS_4ModeE) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[53]">cHwADC_0::startCh(unsigned char)</a> from lib.o(i._ZN8cHwADC_07startChEh) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[54]">cHwADC_0::configCh(unsigned char)</a> from lib.o(i._ZN8cHwADC_08configChEh) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[52]">cHwADC_0::getResult()</a> from lib.o(i._ZN8cHwADC_09getResultEv) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[3c]">cHwTimer::isrHandler()</a> from lib.o(i._ZN8cHwTimer10isrHandlerEv) referenced from lib.o(.constdata__ZTV10cHwTimer_N)
 <LI><a href="#[3c]">cHwTimer::isrHandler()</a> from lib.o(i._ZN8cHwTimer10isrHandlerEv) referenced from lib.o(.constdata__ZTV8cHwTimer)
 <LI><a href="#[3a]">cHwTimer::getCycleTime()</a> from lib.o(i._ZN8cHwTimer12getCycleTimeEv) referenced from lib.o(.constdata__ZTV10cHwTimer_N)
 <LI><a href="#[3a]">cHwTimer::getCycleTime()</a> from lib.o(i._ZN8cHwTimer12getCycleTimeEv) referenced from lib.o(.constdata__ZTV8cHwTimer)
 <LI><a href="#[3b]">cHwTimer::add(cList::Item*)</a> from lib.o(i._ZN8cHwTimer3addEPN5cList4ItemE) referenced from lib.o(.constdata__ZTV10cHwTimer_N)
 <LI><a href="#[3b]">cHwTimer::add(cList::Item*)</a> from lib.o(i._ZN8cHwTimer3addEPN5cList4ItemE) referenced from lib.o(.constdata__ZTV8cHwTimer)
 <LI><a href="#[55]">cHwPort_N::setPinMode(unsigned char, cHwPort::Mode)</a> from lib.o(i._ZN9cHwPort_N10setPinModeEhN7cHwPort4ModeE) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[57]">cHwPort_N::clr(unsigned)</a> from lib.o(i._ZN9cHwPort_N3clrEj) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[58]">cHwPort_N::get()</a> from lib.o(i._ZN9cHwPort_N3getEv) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[56]">cHwPort_N::set(unsigned)</a> from lib.o(i._ZN9cHwPort_N3setEj) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[39]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 3 times from lib.o(.constdata__ZTV10cHwDisplay)
 <LI><a href="#[39]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 2 times from lib.o(.constdata__ZTV11cDevDisplay)
 <LI><a href="#[39]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 2 times from lib.o(.constdata__ZTV12cHwSPImaster)
 <LI><a href="#[39]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 4 times from lib.o(.constdata__ZTV17cHwDisplayGraphic)
 <LI><a href="#[39]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced from lib.o(.constdata__ZTV18cDevControlEncoder)
 <LI><a href="#[39]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 3 times from lib.o(.constdata__ZTV6cHwADC)
 <LI><a href="#[39]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 6 times from lib.o(.constdata__ZTV7cHwPort)
 <LI><a href="#[39]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 2 times from lib.o(.constdata__ZTV8cHwTimer)
 <LI><a href="#[63]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[61]">__sti___7_GUI_cpp</a> from gui.o(i.__sti___7_GUI_cpp) referenced from gui.o(.init_array)
 <LI><a href="#[60]">__sti___8_main_cpp</a> from main.o(i.__sti___8_main_cpp) referenced from main.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[63]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[66]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[68]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[10d]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[10e]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[69]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[10f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[70]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[110]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[6a]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[111]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[112]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[113]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[114]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[6c]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[115]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[116]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[117]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[118]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[119]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[120]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[121]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[122]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[123]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[75]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[124]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[125]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[126]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[127]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[128]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[129]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[67]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[12a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[6d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[12b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[71]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; DFT(int, int, double*, double*, double*, double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[12c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[8a]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[74]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[12d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[76]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[62]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))

<P><STRONG><a name="[12e]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8e]"></a>load_context</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtos_asm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[8d]"></a>save_context</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtos_asm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[78]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[7b]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[7c]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[12f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[77]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[79]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[130]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[4]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[80]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[132]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[133]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>cList::Item::update()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lib.o(i._ZN5cList4Item6updateEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN5cList4ItemE)
</UL>
<P><STRONG><a name="[136]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[82]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[6b]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[7d]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[137]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[86]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[85]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[83]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[6e]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[73]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[87]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[88]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[8b]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[2b]"></a>ADC_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lib.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PWM1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.PWM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM1_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lib.o(i.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_context
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lib.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_context
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>SystemInit</STRONG> (Thumb, 538 bytes, Stack size 0 bytes, lib.o(i.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::cSystem(unsigned char)
</UL>

<P><STRONG><a name="[16]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER0_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER1_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER2_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIMER3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER3_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UART0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lib.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lib.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lib.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USB_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_IRQHandler &rArr; cHwUSB_0::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>displayValue(float, int, int, int)</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, main.o(i._Z12displayValuefiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = displayValue(float, int, int, int) &rArr; GUI::drawRect(Rect, unsigned short) &rArr; GUI::getInstance()
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rect::Rect(int, int, int, int)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI::drawRect(Rect, unsigned short)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>DFT(int, int, double*, double*, double*, double*)</STRONG> (Thumb, 494 bytes, Stack size 112 bytes, main.o(i._Z3DFTiiPdS_S_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = DFT(int, int, double*, double*, double*, double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>cHwDisplay::cHwDisplay__sub_object(unsigned char, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib.o(i._ZN10cHwDisplayC2Ehh))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayGraphic::cHwDisplayGraphic__sub_object(cHwDisplayFont, unsigned char)
</UL>

<P><STRONG><a name="[8c]"></a>cHwTimer_N::isr()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lib.o(i._ZN10cHwTimer_N3isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwTimer_N::isr()
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, lib.o(i._ZN10cHwTimer_NC1ENS_7TimerIdEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ(IRQn)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::cList()
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[139]"></a>cHwTimer_N::cHwTimer_N__sub_object(cHwTimer_N::TimerId, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, lib.o(i._ZN10cHwTimer_NC1ENS_7TimerIdEj), UNUSED)

<P><STRONG><a name="[40]"></a>cDevDigital::isReleased()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(i._ZN11cDevDigital10isReleasedEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[41]"></a>cDevDigital::isActivated()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(i._ZN11cDevDigital11isActivatedEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[3d]"></a>cDevDigital::get()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lib.o(i._ZN11cDevDigital3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cDevDigital::get() &rArr; cHwPort::Pin::get()
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::get()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[3f]"></a>cDevDigital::isSet()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN11cDevDigital5isSetEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[3e]"></a>cDevDigital::update()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib.o(i._ZN11cDevDigital6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cDevDigital::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[a8]"></a>cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lib.o(i._ZN11cDevDigitalC1ER7cHwPorthNS_4ModeEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool) &rArr; cHwPort::Pin::setMode(cHwPort::Mode)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::setMode(cHwPort::Mode)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::set(bool)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::Pin(cHwPort&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[13a]"></a>cDevDigital::cDevDigital__sub_object(cHwPort&, unsigned char, cDevDigital::Mode, bool)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, lib.o(i._ZN11cDevDigitalC1ER7cHwPorthNS_4ModeEb), UNUSED)

<P><STRONG><a name="[b7]"></a>cDevDisplay::cDevDisplay__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN11cDevDisplayC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayGraphic::cDevDisplayGraphic(cHwDisplayGraphic&)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayChar::cDevDisplayChar(cHwDisplay&)
</UL>

<P><STRONG><a name="[42]"></a>TimerHandler::update()</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, main.o(i._ZN12TimerHandler6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TimerHandler::update() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC::get(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTV12TimerHandler)
</UL>
<P><STRONG><a name="[ab]"></a>TimerHandler::TimerHandler()</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, main.o(i._ZN12TimerHandlerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TimerHandler::TimerHandler() &rArr; expf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::Item(cList*)
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[13b]"></a>TimerHandler::TimerHandler__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, main.o(i._ZN12TimerHandlerC1Ev), UNUSED)

<P><STRONG><a name="[b5]"></a>cHwPinConfig::set(cHwPinConfig::Function, unsigned)</STRONG> (Thumb, 250 bytes, Stack size 28 bytes, lib.o(i._ZN12cHwPinConfig3setENS_8FunctionEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster_1::cHwSPImaster_1(cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC_0::configCh(unsigned char)
</UL>

<P><STRONG><a name="[ae]"></a>cHwSPImaster::Device::stop()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(i._ZN12cHwSPImaster6Device4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwSPImaster::Device::stop() &rArr; cHwPort::Pin::set()
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::set()
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::write(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[af]"></a>cHwSPImaster::Device::start()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(i._ZN12cHwSPImaster6Device5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::clr()
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::write(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[59]"></a>cHwSPImaster::Device::write(unsigned char*, unsigned short)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lib.o(i._ZN12cHwSPImaster6Device5writeEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::start()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::stop()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeDat(unsigned short)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeCmd(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN12cHwSPImaster6DeviceE)
</UL>
<P><STRONG><a name="[c6]"></a>cHwSPImaster::Device::Device(const cHwSPImaster::Device&)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lib.o(i._ZN12cHwSPImaster6DeviceC1ERKS0_))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char)
</UL>

<P><STRONG><a name="[13c]"></a>cHwSPImaster::Device::Device__sub_object(const cHwSPImaster::Device&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lib.o(i._ZN12cHwSPImaster6DeviceC1ERKS0_), UNUSED)

<P><STRONG><a name="[b2]"></a>cHwSPImaster::Device::Device(cHwSPImaster&, cHwPort&, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, main.o(i._ZN12cHwSPImaster6DeviceC1ERS_R7cHwPorth))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cHwSPImaster::Device::Device(cHwSPImaster&, cHwPort&, unsigned char) &rArr; cHwPort::Pin::Pin(cHwPort&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::Pin(cHwPort&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[13d]"></a>cHwSPImaster::Device::Device__sub_object(cHwSPImaster&, cHwPort&, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, main.o(i._ZN12cHwSPImaster6DeviceC1ERS_R7cHwPorth), UNUSED)

<P><STRONG><a name="[b4]"></a>cHwSPImaster::cHwSPImaster__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN12cHwSPImasterC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster_1::cHwSPImaster_1(cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)
</UL>

<P><STRONG><a name="[e1]"></a>cHwDisplayFont::cHwDisplayFont(const cHwDisplayFontProperties*, const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib.o(i._ZN14cHwDisplayFontC1EPK24cHwDisplayFontPropertiesPKh))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[13e]"></a>cHwDisplayFont::cHwDisplayFont__sub_object(const cHwDisplayFontProperties*, const unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lib.o(i._ZN14cHwDisplayFontC1EPK24cHwDisplayFontPropertiesPKh), UNUSED)

<P><STRONG><a name="[43]"></a>cHwSPImaster_1::transceiveByte(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lib.o(i._ZN14cHwSPImaster_114transceiveByteEh))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV14cHwSPImaster_1)
</UL>
<P><STRONG><a name="[b3]"></a>cHwSPImaster_1::cHwSPImaster_1(cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, lib.o(i._ZN14cHwSPImaster_1C1EN12cHwSPImaster4MODEENS0_11ClockPolPhaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cHwSPImaster_1::cHwSPImaster_1(cHwSPImaster::MODE, cHwSPImaster::ClockPolPha) &rArr; cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::cHwSPImaster__sub_object()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[13f]"></a>cHwSPImaster_1::cHwSPImaster_1__sub_object(cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, lib.o(i._ZN14cHwSPImaster_1C1EN12cHwSPImaster4MODEENS0_11ClockPolPhaE), UNUSED)

<P><STRONG><a name="[b6]"></a>cDevDisplayChar::cDevDisplayChar(cHwDisplay&)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lib.o(i._ZN15cDevDisplayCharC1ER10cHwDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cDevDisplayChar::cDevDisplayChar(cHwDisplay&)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplay::cDevDisplay__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[140]"></a>cDevDisplayChar::cDevDisplayChar__sub_object(cHwDisplay&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lib.o(i._ZN15cDevDisplayCharC1ER10cHwDisplay), UNUSED)

<P><STRONG><a name="[45]"></a>cHwDisplayGraphic::putRectangle(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, lib.o(i._ZN17cHwDisplayGraphic12putRectangleEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cHwDisplayGraphic::putRectangle(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV17cHwDisplayGraphic)
<LI> lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
</UL>
<P><STRONG><a name="[44]"></a>cHwDisplayGraphic::setPaintColor(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib.o(i._ZN17cHwDisplayGraphic13setPaintColorEt))
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV17cHwDisplayGraphic)
<LI> lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
</UL>
<P><STRONG><a name="[b8]"></a>cHwDisplayGraphic::cHwDisplayGraphic__sub_object(cHwDisplayFont, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 28 bytes, lib.o(i._ZN17cHwDisplayGraphicC2E14cHwDisplayFonth))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cHwDisplayGraphic::cHwDisplayGraphic__sub_object(cHwDisplayFont, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplay::cHwDisplay__sub_object(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char)
</UL>

<P><STRONG><a name="[46]"></a>cDevControlEncoder::update()</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lib.o(i._ZN18cDevControlEncoder6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cDevControlEncoder::update() &rArr; cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::isFull()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV18cDevControlEncoder)
<LI> lib.o(.constdata__ZTV26cDevControlEncoderJoystick)
</UL>
<P><STRONG><a name="[47]"></a>cDevControlEncoder::getCtrl()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lib.o(i._ZN18cDevControlEncoder7getCtrlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cDevControlEncoder::getCtrl()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV18cDevControlEncoder)
<LI> lib.o(.constdata__ZTV26cDevControlEncoderJoystick)
</UL>
<P><STRONG><a name="[bc]"></a>cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lib.o(i._ZN18cDevControlEncoderC2EP11cDevDigitalP8cHwTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*) &rArr; operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::Item(cList*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoderJoystick::cDevControlEncoderJoystick(cDevDigital*, cDevDigital*, cDevDigital*, cHwTimer*, unsigned short)
</UL>

<P><STRONG><a name="[49]"></a>cDevDisplayGraphic::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lib.o(i._ZN18cDevDisplayGraphic13drawRectangleEttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cDevDisplayGraphic::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV18cDevDisplayGraphic)
</UL>
<P><STRONG><a name="[48]"></a>cDevDisplayGraphic::clear()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(i._ZN18cDevDisplayGraphic5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cDevDisplayGraphic::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayGraphic::cDevDisplayGraphic(cHwDisplayGraphic&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV18cDevDisplayGraphic)
</UL>
<P><STRONG><a name="[be]"></a>cDevDisplayGraphic::cDevDisplayGraphic(cHwDisplayGraphic&)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lib.o(i._ZN18cDevDisplayGraphicC1ER17cHwDisplayGraphic))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cDevDisplayGraphic::cDevDisplayGraphic(cHwDisplayGraphic&) &rArr; cDevDisplayGraphic::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayGraphic::clear()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplay::cDevDisplay__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>cDevDisplayGraphic::cDevDisplayGraphic__sub_object(cHwDisplayGraphic&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lib.o(i._ZN18cDevDisplayGraphicC1ER17cHwDisplayGraphic), UNUSED)

<P><STRONG><a name="[bf]"></a>cHwDisp_SPFD5408Bspi::init()</STRONG> (Thumb, 438 bytes, Stack size 8 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cHwDisp_SPFD5408Bspi::init() &rArr; cHwDisp_SPFD5408Bspi::maxWindow() &rArr; cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::maxWindow()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::delayMilliSec(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char)
</UL>

<P><STRONG><a name="[4a]"></a>cHwDisp_SPFD5408Bspi::clear()</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cHwDisp_SPFD5408Bspi::clear()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
</UL>
<P><STRONG><a name="[4b]"></a>cHwDisp_SPFD5408Bspi::setArea(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi7setAreaEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cHwDisp_SPFD5408Bspi::setArea(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeCmd(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
</UL>
<P><STRONG><a name="[4c]"></a>cHwDisp_SPFD5408Bspi::setPixel(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi8setPixelEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cHwDisp_SPFD5408Bspi::setPixel(unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeDat(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
</UL>
<P><STRONG><a name="[c3]"></a>cHwDisp_SPFD5408Bspi::writeCmd(unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi8writeCmdEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cHwDisp_SPFD5408Bspi::writeCmd(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::write(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::setArea(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[c4]"></a>cHwDisp_SPFD5408Bspi::writeDat(unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi8writeDatEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::write(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::setPixel(unsigned short)
</UL>

<P><STRONG><a name="[c1]"></a>cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi8writeRegEht))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeDat(unsigned short)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeCmd(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::init()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::maxWindow()
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::setArea(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[c2]"></a>cHwDisp_SPFD5408Bspi::maxWindow()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi9maxWindowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cHwDisp_SPFD5408Bspi::maxWindow() &rArr; cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::init()
</UL>

<P><STRONG><a name="[c5]"></a>cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, lib.o(i._ZN20cHwDisp_SPFD5408BspiC1ERN12cHwSPImaster6DeviceERN7cHwPort3PinE14cHwDisplayFonth))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char) &rArr; cHwDisp_SPFD5408Bspi::init() &rArr; cHwDisp_SPFD5408Bspi::maxWindow() &rArr; cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::init()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayGraphic::cHwDisplayGraphic__sub_object(cHwDisplayFont, unsigned char)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::Device(const cHwSPImaster::Device&)
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[142]"></a>cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi__sub_object(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, lib.o(i._ZN20cHwDisp_SPFD5408BspiC1ERN12cHwSPImaster6DeviceERN7cHwPort3PinE14cHwDisplayFonth), UNUSED)

<P><STRONG><a name="[4d]"></a>cDevControlEncoderJoystick::getIncrement()</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, lib.o(i._ZN26cDevControlEncoderJoystick12getIncrementEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cDevControlEncoderJoystick::getIncrement()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV26cDevControlEncoderJoystick)
</UL>
<P><STRONG><a name="[c7]"></a>cDevControlEncoderJoystick::cDevControlEncoderJoystick(cDevDigital*, cDevDigital*, cDevDigital*, cHwTimer*, unsigned short)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lib.o(i._ZN26cDevControlEncoderJoystickC1EP11cDevDigitalS1_S1_P8cHwTimert))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cDevControlEncoderJoystick::cDevControlEncoderJoystick(cDevDigital*, cDevDigital*, cDevDigital*, cHwTimer*, unsigned short) &rArr; cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*) &rArr; operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[143]"></a>cDevControlEncoderJoystick::cDevControlEncoderJoystick__sub_object(cDevDigital*, cDevDigital*, cDevDigital*, cHwTimer*, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lib.o(i._ZN26cDevControlEncoderJoystickC1EP11cDevDigitalS1_S1_P8cHwTimert), UNUSED)

<P><STRONG><a name="[c8]"></a>GUI::getInstance()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i._ZN3GUI11getInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI::getInstance()
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI::drawRect(Rect, unsigned short)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>GUI::drawRect(Rect, unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, main.o(i._ZN3GUI8drawRectE4Rectt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI::drawRect(Rect, unsigned short) &rArr; GUI::getInstance()
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI::getInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayValue(float, int, int, int)
</UL>

<P><STRONG><a name="[97]"></a>Rect::Rect(int, int, int, int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i._ZN4RectC1Eiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Rect::Rect(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayValue(float, int, int, int)
</UL>

<P><STRONG><a name="[144]"></a>Rect::Rect__sub_object(int, int, int, int)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN4RectC1Eiiii), UNUSED)

<P><STRONG><a name="[ca]"></a>cList::add(cList::Item*)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lib.o(i._ZN5cList3addEPNS_4ItemE))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer::add(cList::Item*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::Item(cList*)
</UL>

<P><STRONG><a name="[ac]"></a>cList::Item::Item(cList*)</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lib.o(i._ZN5cList4ItemC1EPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cList::Item::Item(cList*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::add(cList::Item*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerHandler::TimerHandler()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*)
</UL>

<P><STRONG><a name="[145]"></a>cList::Item::Item__sub_object(cList*)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, lib.o(i._ZN5cList4ItemC1EPS_), UNUSED)

<P><STRONG><a name="[d1]"></a>cList::updateAll()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib.o(i._ZN5cList9updateAllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cList::updateAll()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer::isrHandler()
</UL>

<P><STRONG><a name="[a2]"></a>cList::cList()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN5cListC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[146]"></a>cList::cList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lib.o(i._ZN5cListC1Ev), UNUSED)

<P><STRONG><a name="[50]"></a>cHwADC::get(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lib.o(i._ZN6cHwADC3getEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwADC::get(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerHandler::update()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV6cHwADC)
<LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[51]"></a>cHwADC::isr()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lib.o(i._ZN6cHwADC3isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwADC::isr()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV6cHwADC)
<LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[4f]"></a>cHwADC::enable(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lib.o(i._ZN6cHwADC6enableEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwADC::enable(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV6cHwADC)
<LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[4e]"></a>cHwADC::update()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lib.o(i._ZN6cHwADC6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwADC::update()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV6cHwADC)
<LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[cb]"></a>cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lib.o(i._ZN6cHwADCC2EhP8cHwTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*) &rArr; operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::Item(cList*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC_0::cHwADC_0(cHwTimer*)
</UL>

<P><STRONG><a name="[5e]"></a>cHwPort::Pin::clr()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3Pin3clrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort::Pin::clr()
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::start()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[5f]"></a>cHwPort::Pin::get()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3Pin3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort::Pin::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::get()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[5d]"></a>cHwPort::Pin::set(bool)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lib.o(i._ZN7cHwPort3Pin3setEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwPort::Pin::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[5c]"></a>cHwPort::Pin::set()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3Pin3setEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort::Pin::set()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::stop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[5b]"></a>cHwPort::Pin::setMode(cHwPort::Mode)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lib.o(i._ZN7cHwPort3Pin7setModeENS_4ModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwPort::Pin::setMode(cHwPort::Mode)
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[a9]"></a>cHwPort::Pin::Pin(cHwPort&, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3PinC1ERS_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort::Pin::Pin(cHwPort&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::Device(cHwSPImaster&, cHwPort&, unsigned char)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[147]"></a>cHwPort::Pin::Pin__sub_object(cHwPort&, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3PinC1ERS_h), UNUSED)

<P><STRONG><a name="[d5]"></a>cHwPort::cHwPort__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN7cHwPortC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort_N::cHwPort_N(cHwPort_N::PortId)
</UL>

<P><STRONG><a name="[cc]"></a>cSystem::delayMicroSec(unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lib.o(i._ZN7cSystem13delayMicroSecEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cSystem::delayMicroSec(unsigned short) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::delayMilliSec(unsigned short)
</UL>

<P><STRONG><a name="[c0]"></a>cSystem::delayMilliSec(unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib.o(i._ZN7cSystem13delayMilliSecEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cSystem::delayMilliSec(unsigned short) &rArr; cSystem::delayMicroSec(unsigned short) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::delayMicroSec(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::init()
</UL>

<P><STRONG><a name="[cf]"></a>cSystem::disableWatchdog()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lib.o(i._ZN7cSystem15disableWatchdogEv))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::cSystem(unsigned char)
</UL>

<P><STRONG><a name="[b1]"></a>cSystem::enableInterrupt()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lib.o(i._ZN7cSystem15enableInterruptEv))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::isFull()
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC::get(unsigned char)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::write(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[b0]"></a>cSystem::disableInterrupt()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib.o(i._ZN7cSystem16disableInterruptEv))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::isFull()
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC::get(unsigned char)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::write(unsigned char*, unsigned short)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::cSystem(unsigned char)
</UL>

<P><STRONG><a name="[cd]"></a>cSystem::cSystem(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lib.o(i._ZN7cSystemC1Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cSystem::cSystem(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableWatchdog()
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[148]"></a>cSystem::cSystem__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, lib.o(i._ZN7cSystemC1Eh), UNUSED)

<P><STRONG><a name="[53]"></a>cHwADC_0::startCh(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwADC_07startChEh))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[54]"></a>cHwADC_0::configCh(unsigned char)</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, lib.o(i._ZN8cHwADC_08configChEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cHwADC_0::configCh(unsigned char) &rArr; cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[52]"></a>cHwADC_0::getResult()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwADC_09getResultEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[d0]"></a>cHwADC_0::cHwADC_0(cHwTimer*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lib.o(i._ZN8cHwADC_0C1EP8cHwTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cHwADC_0::cHwADC_0(cHwTimer*) &rArr; cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*) &rArr; operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ(IRQn)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[149]"></a>cHwADC_0::cHwADC_0__sub_object(cHwTimer*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lib.o(i._ZN8cHwADC_0C1EP8cHwTimer), UNUSED)

<P><STRONG><a name="[3c]"></a>cHwTimer::isrHandler()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(i._ZN8cHwTimer10isrHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cHwTimer::isrHandler() &rArr; cList::updateAll()
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::updateAll()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV8cHwTimer)
<LI> lib.o(.constdata__ZTV10cHwTimer_N)
</UL>
<P><STRONG><a name="[3a]"></a>cHwTimer::getCycleTime()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwTimer12getCycleTimeEv))
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV8cHwTimer)
<LI> lib.o(.constdata__ZTV10cHwTimer_N)
</UL>
<P><STRONG><a name="[3b]"></a>cHwTimer::add(cList::Item*)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, lib.o(i._ZN8cHwTimer3addEPN5cList4ItemE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cHwTimer::add(cList::Item*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::add(cList::Item*)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV8cHwTimer)
<LI> lib.o(.constdata__ZTV10cHwTimer_N)
</UL>
<P><STRONG><a name="[8f]"></a>cHwUSB_0::isr()</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, lib.o(i._ZN8cHwUSB_03isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cHwUSB_0::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::RdCmdDat(unsigned)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::WrCmd(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>cHwUSB_0::WrCmd(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwUSB_05WrCmdEj))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[d3]"></a>cHwUSB_0::RdCmdDat(unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwUSB_08RdCmdDatEj))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[55]"></a>cHwPort_N::setPinMode(unsigned char, cHwPort::Mode)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lib.o(i._ZN9cHwPort_N10setPinModeEhN7cHwPort4ModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort_N::setPinMode(unsigned char, cHwPort::Mode)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[57]"></a>cHwPort_N::clr(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN9cHwPort_N3clrEj))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[58]"></a>cHwPort_N::get()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib.o(i._ZN9cHwPort_N3getEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[56]"></a>cHwPort_N::set(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN9cHwPort_N3setEj))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[d4]"></a>cHwPort_N::cHwPort_N(cHwPort_N::PortId)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lib.o(i._ZN9cHwPort_NC1ENS_6PortIdE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwPort_N::cHwPort_N(cHwPort_N::PortId)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::cHwPort__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[14a]"></a>cHwPort_N::cHwPort_N__sub_object(cHwPort_N::PortId)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lib.o(i._ZN9cHwPort_NC1ENS_6PortIdE), UNUSED)

<P><STRONG><a name="[e6]"></a>std::abs(double)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i._ZSt3absd))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>operator new[] (unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*)
</UL>

<P><STRONG><a name="[dd]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[e4]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[c9]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI::getInstance()
</UL>

<P><STRONG><a name="[39]"></a>__cxa_pure_virtual</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 8]<UL><LI> lib.o(.constdata__ZTV8cHwTimer)
<LI> lib.o(.constdata__ZTV17cHwDisplayGraphic)
<LI> lib.o(.constdata__ZTV6cHwADC)
<LI> lib.o(.constdata__ZTV18cDevControlEncoder)
<LI> lib.o(.constdata__ZTV7cHwPort)
<LI> lib.o(.constdata__ZTV10cHwDisplay)
<LI> lib.o(.constdata__ZTV12cHwSPImaster)
<LI> lib.o(.constdata__ZTV11cDevDisplay)
</UL>
<P><STRONG><a name="[d6]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 832 bytes, Stack size 136 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[da]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[db]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[dc]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[de]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[df]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[9d]"></a>cos</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFT(int, int, double*, double*, double*, double*)
</UL>

<P><STRONG><a name="[14b]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, expf.o(i.expf), UNUSED)

<P><STRONG><a name="[ad]"></a>expf</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, expf.o(i.expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = expf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerHandler::TimerHandler()
</UL>

<P><STRONG><a name="[72]"></a>main</STRONG> (Thumb, 286 bytes, Stack size 288 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = main &rArr; DFT(int, int, double*, double*, double*, double*) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(double)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rect::Rect(int, int, int, int)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI::drawRect(Rect, unsigned short)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI::getInstance()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFT(int, int, double*, double*, double*, double*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayValue(float, int, int, int)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayGraphic::cDevDisplayGraphic(cHwDisplayGraphic&)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer::add(cList::Item*)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC::enable(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[9e]"></a>sin</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFT(int, int, double*, double*, double*, double*)
</UL>

<P><STRONG><a name="[ba]"></a>cFifo&lang;cDevControlEncoder::tEvent&rang;::isFull()</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, lib.o(t._ZN5cFifoIN18cDevControlEncoder6tEventEE6isFullEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cFifo&lang;cDevControlEncoder::tEvent&rang;::isFull()
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::update()
</UL>

<P><STRONG><a name="[bb]"></a>cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, lib.o(t._ZN5cFifoIN18cDevControlEncoder6tEventEElsERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::update()
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFT(int, int, double*, double*, double*, double*)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[ec]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[ef]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[f5]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFT(int, int, double*, double*, double*, double*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[f1]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[f2]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::delayMicroSec(unsigned short)
</UL>

<P><STRONG><a name="[f3]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFT(int, int, double*, double*, double*, double*)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[14c]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[a6]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::delayMicroSec(unsigned short)
</UL>

<P><STRONG><a name="[14d]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[14e]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[f4]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[f8]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFT(int, int, double*, double*, double*, double*)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::delayMicroSec(unsigned short)
</UL>

<P><STRONG><a name="[f6]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[eb]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
</UL>

<P><STRONG><a name="[ee]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[f9]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFT(int, int, double*, double*, double*, double*)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[fb]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerHandler::update()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[fe]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[100]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[105]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerHandler::TimerHandler()
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerHandler::update()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayValue(float, int, int, int)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[101]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayValue(float, int, int, int)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[102]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[103]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerHandler::update()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[14f]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerHandler::update()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayValue(float, int, int, int)
</UL>

<P><STRONG><a name="[104]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[108]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerHandler::TimerHandler()
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerHandler::update()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayValue(float, int, int, int)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[106]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[fd]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[ea]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerHandler::update()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayValue(float, int, int, int)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[107]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[e2]"></a>_frnd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, frnd.o(x$fpl$frnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[109]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerHandler::TimerHandler()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayValue(float, int, int, int)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[10b]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[f0]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[d9]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>

<P><STRONG><a name="[e0]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[10c]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a3]"></a>NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lib.o(i._Z14NVIC_EnableIRQ4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC_0::cHwADC_0(cHwTimer*)
</UL>

<P><STRONG><a name="[60]"></a>__sti___8_main_cpp</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, main.o(i.__sti___8_main_cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __sti___8_main_cpp &rArr; cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char) &rArr; cHwDisp_SPFD5408Bspi::init() &rArr; cHwDisp_SPFD5408Bspi::maxWindow() &rArr; cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::Device(cHwSPImaster&, cHwPort&, unsigned char)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerHandler::TimerHandler()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoderJoystick::cDevControlEncoderJoystick(cDevDigital*, cDevDigital*, cDevDigital*, cHwTimer*, unsigned short)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayChar::cDevDisplayChar(cHwDisplay&)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster_1::cHwSPImaster_1(cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayFont::cHwDisplayFont(const cHwDisplayFontProperties*, const unsigned char*)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort_N::cHwPort_N(cHwPort_N::PortId)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC_0::cHwADC_0(cHwTimer*)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::cSystem(unsigned char)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::Pin(cHwPort&, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[61]"></a>__sti___7_GUI_cpp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui.o(i.__sti___7_GUI_cpp))
<BR>[Address Reference Count : 1]<UL><LI> gui.o(.init_array)
</UL>
<P><STRONG><a name="[fa]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[ed]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[10a]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[ff]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
